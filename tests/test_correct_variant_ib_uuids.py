import os
from pathlib import Path
from uuid import UUID
from mbtools import correct_variant_ib_uuids
import pytest


@pytest.fixture
def test_data_path():
    return Path(__file__).parent / "data/correct_variant_ib_uuids"


@pytest.fixture
def single_input_and_variant_data(test_data_path):
    with open(test_data_path / "main.html", "r") as f:
        main = f.read()
    with open(test_data_path / "variant.html", "r") as f:
        variant = f.read()

    with open(test_data_path / "variant_out.html", "r") as f:
        variant_out = f.read()
    return (
        main,
        variant,
        variant_out
    )


@pytest.fixture
def autogenerated_uuid():
    return UUID("7080c78d-298b-40ba-a68d-55d6a93b00fc")


def test_correct_variant_ib_uuids(
    tmp_path, mocker, autogenerated_uuid, single_input_and_variant_data
):
    main, variant, variant_out = single_input_and_variant_data

    os.mkdir(tmp_path / "html")
    html_dir = f"{tmp_path}/html"
    fp1 = Path(html_dir) / "main.html"
    os.mkdir(f"{html_dir}/main")
    fp2 = Path(html_dir) / "main/variant.html"
    fp1.write_text(main)
    fp2.write_text(variant)

    mocker.patch(
        "mbtools.correct_variant_ib_uuids.uuid4",
        lambda: autogenerated_uuid
    )

    mocker.patch(
        "sys.argv",
        ["", html_dir]
    )

    correct_variant_ib_uuids.main()

    with open(fp2, 'r') as f:
        result = f.read()
        assert variant_out == result
